// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
  ) RETURNING id, created_at, updated_at, name, url, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const deleteFeeds = `-- name: DeleteFeeds :exec
DELETE FROM feeds
`

func (q *Queries) DeleteFeeds(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteFeeds)
	return err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, created_at, updated_at, name, url, last_fetched_at FROM feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsByUrl = `-- name: GetFeedsByUrl :one
SELECT feeds.id, feeds.name FROM feeds WHERE feeds.url = $1 LIMIT 1
`

type GetFeedsByUrlRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetFeedsByUrl(ctx context.Context, url string) (GetFeedsByUrlRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedsByUrl, url)
	var i GetFeedsByUrlRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getFeedsWithUsername = `-- name: GetFeedsWithUsername :many
 SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.last_fetched_at, users.name AS username FROM feeds JOIN feed_follows ON feeds.id = feed_follows.feed_id JOIN users ON feed_follows.user_id = users.id
`

type GetFeedsWithUsernameRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Url           string
	LastFetchedAt sql.NullTime
	Username      string
}

func (q *Queries) GetFeedsWithUsername(ctx context.Context) ([]GetFeedsWithUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUsernameRow
	for rows.Next() {
		var i GetFeedsWithUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.LastFetchedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT feeds.id, feeds.name, feeds.url FROM feeds ORDER BY last_fetched_at ASC NULLS FIRST LIMIT 1
`

type GetNextFeedToFetchRow struct {
	ID   uuid.UUID
	Name string
	Url  string
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (GetNextFeedToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i GetNextFeedToFetchRow
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds SET last_fetched_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}
